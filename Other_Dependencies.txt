# Sentence delimiters
DELIMITERS = "<།>" "<༑>";

LIST ALLPOS = ADJ ADP ADV AUX DET INTJ NOUN NUM PART PRON PROPN PUNCT SCONJ VERB X;

LIST @punct = @punct;
LIST @mark = @mark;
LIST @fixed = @fixed;
LIST @advmod = @advmod;
LIST @case = @case;
LIST @aux-fin = @aux-fin;
LIST @neg = @neg;
LIST @appos = @appos;
LIST @amod = @amod;
LIST @nmod = @nmod;
LIST @det = @det;
LIST @nmod-poss = @nmod-poss;
LIST @nummod = @nummod;
LIST @nmod-pro = @nmod-pro;
LIST @conj = @conj;
LIST @cc = @cc;
LIST @obl-adv = @obl-adv;

LIST >>> = >>> ;
LIST <<< = <<< ;

# Helpers
SET np.elem = (NOUN) OR (ADJ) OR (NUM) OR (PROPN) OR (DET) OR (PRON) OR (VerbForm=Vnoun);

SET excl.agn = (Case=*) - (Case=Agn);

SET LEFT_NP_BOUNDARY = (VERB) OR (ADP) OR (PUNCT) OR (SCONJ) OR (PART) OR (ADV) OR (AUX);
SET RIGHT_NP_BOUNDARY = (ADP) OR (PUNCT) OR (SCONJ) OR (Polarity=Neg);

SET Head_NOUN = (NOUN) OR (NUM) OR (PROPN) OR (PRON) OR (DET) OR (VerbForm=Vnoun);

LIST TAGS = \^arg1 \^arg2 \^arg2-hon \^arg2-lvc \^arg3 \^argcl \^aux \^aux-lvc \^cop \^obl \^obl-adv \^obl-arg \^aux-redup;

#DEPENDENCY RULES

# First set of rules for NP elements,  second set of rules for ADP, PART, SCONJ and so on - in this way I can link ADP to the Head Noun because the other elements will have already a dependency - putting in SETPARENT... TO (NONE P ALLPOS - TAGS). The (NONE p ALLPOS - TAGS) condition allows me to jump NP elements thet have already The Head Noun as a parent.

#NP ELEMENTS:

#propn as adposition
# added condition OR (DET) OR (ADJ) OR (NUM) in the two following rules at the end in order to avoid crossing of nps: NOUN + DET/NUM/ADJ + NOUN + CASE.


#NOUN and PROPN as adpositions. Added (NOT 1* (Case=Gen/Com/Ter)) to avoid cases like: N + N + Gen/Com/Ter + N - In this case the second NOUN is a nmod (or a obl-adv in the case of Ter) and not an adposition. For the explanation of this set of rules see the adjectives section.

#cases NOUN - TAGS + PROPN: in this case most likely is the NOUN @appos to PROPN - I need this dependency before the rules for the PROPN as @appos
SETPARENT (NOUN) - TAGS (NONE p ALLPOS) TO (1 (PROPN));
MAP (@appos) TARGET (NOUN)(p (PROPN));


SETPARENT (PROPN) - TAGS (NONE p ALLPOS) (NOT 1 (Case=Gen) OR (Case=Com)) TO (-1* Head_NOUN + TAGS - (DET) BARRIER LEFT_NP_BOUNDARY OR (DET) OR (ADJ) OR (NUM));
SETPARENT (PROPN) - TAGS (NONE p ALLPOS) (NOT 1 (Case=Gen) OR (Case=Com)) TO (-1* Head_NOUN - (DET) BARRIER LEFT_NP_BOUNDARY OR (DET) OR (ADJ) OR (NUM))(-1 LEFT_NP_BOUNDARY);
SETPARENT (PROPN) - TAGS  (NONE p ALLPOS)(NOT 1 (Case=Gen) OR (Case=Com))(NONE p ALLPOS) TO (-1* Head_NOUN - (DET) BARRIER LEFT_NP_BOUNDARY OR (DET) OR (ADJ) OR (NUM))(-2< (PUNCT));
MAP (@appos) TARGET (PROPN) - TAGS (p Head_NOUN);


#check these cases not included at the moment
#SETPARENT ((NOUN)- TAGS)(NONE p ALLPOS) TO (-1* Head_NOUN - (DET) BARRIER LEFT_NP_BOUNDARY OR (DET) OR (ADJ)) (-1 TAGS);

#An additional set of rules has been introduced before the rules for @appos for NOUNS: this set of rules deals with cases as N(arg) + N + N(optional) + Ter. These are adverbial expressions as bzhin-du or yid-bzhin-du where the noun has not been tagged as ^obl-adv by the annotators (it's not relevant for the argument structures of the verb). This missed ones have been automatically tagged with a set of three rules - one rule for cases as N(arg) + N + N + Ter (I'm also excluding with (NOT -1 (NOUN) the linking of the second noun to the verb (it will treated in the following rules as @appos), a second  rule for cases N + Ter with a left NP boundary element in position -1. The condition (NOT 1 Head_NOUN + TAGS) has been added to avoid cases N + N(TAGS) + Ter to be tagged as @obl-adv. This cases can be fixed with an @appos tag.

SETPARENT (NOUN) - TAGS (NOT 1 Head_NOUN + TAGS) (1* (Case=Ter) BARRIER (ADP))(-1* Head_NOUN + TAGS - (DET) BARRIER LEFT_NP_BOUNDARY OR (DET) OR (ADJ) OR (NUM))(NOT -1 (NOUN))(NONE p ALLPOS) TO (1* (VERB));
SETPARENT (NOUN) - TAGS (NOT 1 Head_NOUN + TAGS) (1* (Case=Ter) BARRIER (ADP))(-1 LEFT_NP_BOUNDARY OR (DET) OR (ADJ) OR (NUM))(NONE p ALLPOS) TO (1* (VERB));
MAP (@obl-adv) TARGET Head_NOUN - TAGS (p (VERB));


#subcases: N(@obl-adv) + N + Ter: the second NOUN is @appos to the first one.
SETPARENT (NOUN)(NONE p ALLPOS) TO (-1 (NOUN) + (@obl-adv));
MAP (@appos) TARGET (NOUN) (-1 (NOUN)) (p (NOUN) + (@obl-adv));

#locative NA

SETPARENT (NOUN) - TAGS (NOT 1 Head_NOUN + TAGS) (1* (Case=Loc) BARRIER (ADP))(-1* Head_NOUN + TAGS - (DET) BARRIER LEFT_NP_BOUNDARY OR (DET) OR (ADJ) OR (NUM))(NOT -1 (NOUN))(NONE p ALLPOS) TO (1* (VERB));
SETPARENT (NOUN) - TAGS (NOT 1 Head_NOUN + TAGS) (1* (Case=Loc) BARRIER (ADP))(-1 LEFT_NP_BOUNDARY OR (DET) OR (ADJ) OR (NUM))(NONE p ALLPOS) TO (1* (VERB));
MAP (@obl-adv) TARGET Head_NOUN - TAGS (p (VERB));


SETPARENT (NOUN) - TAGS (NONE p ALLPOS)(NOT 1* (Case=Gen) OR (Case=Com) OR (Case=Ter)) TO (-1* Head_NOUN + TAGS OR (@obl-arg) - (DET) BARRIER LEFT_NP_BOUNDARY OR (DET) OR (ADJ) OR (NUM));
SETPARENT (NOUN) - TAGS (NONE p ALLPOS)(NOT 1* (Case=Gen) OR (Case=Com) OR (Case=Ter)) TO (-1* Head_NOUN - (DET) BARRIER LEFT_NP_BOUNDARY OR (DET) OR (ADJ) OR (NUM))(-1 LEFT_NP_BOUNDARY);
SETPARENT (NOUN) - TAGS  (NONE p ALLPOS)(NOT 1* (Case=Gen) OR (Case=Com) OR (Case=Ter))(NONE p ALLPOS) TO (-1* Head_NOUN - (DET) BARRIER LEFT_NP_BOUNDARY OR (DET) OR (ADJ) OR (NUM))(-2< (PUNCT));
MAP (@appos) TARGET (NOUN) - TAGS (p Head_NOUN);



#Nouns (without arg labels) + dang

SETPARENT (NOUN) - TAGS (1 ("<དང་>"))(NONE p ALLPOS) TO (2 Head_NOUN);
MAP (@conj) TARGET (NOUN) - TAGS (1 ("<དང་>"))(p Head_NOUN);

#adjectives

#adjectives (I am also taking into account cases of ADJ as head nouns)
#the first rule deals with cases N + N(arg)+ ADJ - to create a parental relation between ADJ and the second NOUN. The second rule deals with all other cases - the condition (-1 LEFT_NP_BOUNDARY) forces to create a parental relation between the ADJ and the leftmost element of the NP. Example: N + N + DET + ADJ - the rule will not stop to DET but will point to the first noun. The third rule deals with NP at the beginning of a section. The same set of rules applies for NOUN and PROPN as adpositions NUM, DET and ADP.
SETPARENT (ADJ) (NONE p ALLPOS) TO (-1* Head_NOUN + TAGS OR (ADJ) + TAGS BARRIER LEFT_NP_BOUNDARY);
SETPARENT (ADJ) (NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-1 LEFT_NP_BOUNDARY);
SETPARENT (ADJ) (NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-2< (PUNCT));
MAP (@amod) TARGET (ADJ) - TAGS (p Head_NOUN OR (ADJ) + TAGS);

#numerals

SETPARENT (NUM) (NONE p ALLPOS) TO (-1* Head_NOUN + TAGS BARRIER LEFT_NP_BOUNDARY);
SETPARENT (NUM) (NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-1 LEFT_NP_BOUNDARY);
SETPARENT (NUM) (NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-2< (PUNCT))(NONE p ALLPOS - TAGS);
MAP (@nummod)TARGET (NUM) - TAGS (p Head_NOUN);

#pronouns - most of the pronouns are arguments or nmod - safer not to link them to other NP elements.

SETPARENT (PRON) (NONE p ALLPOS) TO (-1 (PRON));
MAP (@nmod-pro) TARGET (PRON) (p (PRON));

#determiners

SETPARENT (DET) (NONE p ALLPOS) TO (-1* Head_NOUN + TAGS OR (ADJ) + TAGS BARRIER LEFT_NP_BOUNDARY);
SETPARENT (DET) (NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-1 LEFT_NP_BOUNDARY);
SETPARENT (DET) (NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-2< (PUNCT))(NONE p ALLPOS - TAGS);
MAP (@det) TARGET (DET) - TAGS (p Head_NOUN OR (ADJ) + TAGS);


#----------PART-------------------------------------------------------------

#adverbs
SETPARENT (PART) (NONE p ALLPOS) TO (-1 (ADV));
MAP (@fixed) TARGET (PART) - TAGS (p (ADV));

#negations
SETPARENT (PART) + (Polarity=Neg)(NONE p ALLPOS) TO (1* (VERB) OR (AUX));
MAP (@neg) TARGET (PART) + (Polarity=Neg)(p (VERB) OR (AUX));

#final sentence suffix + imp
SETPARENT (PART) + (Mood=Ind) OR (PART) + (Mood=Imp)(NONE p ALLPOS) TO (-1* (VERB))(NONE p ALLPOS - TAGS);
MAP (@aux-fin) TARGET (PART) + (Mood=Ind) OR (PART) + (Mood=Imp)(p (VERB));

#'ang / ni after NP

#Cases where the PART follows the CASE after the NP - Rgyal-po-chen-pos[agn]-ni
SETPARENT (PART) (NONE p ALLPOS)(-1 (ADP)) TO (-1* Head_NOUN)(-1 LEFT_NP_BOUNDARY);

SETPARENT (PART) (NONE p ALLPOS) TO (-1* Head_NOUN + TAGS BARRIER LEFT_NP_BOUNDARY);
SETPARENT (PART) (NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-1 LEFT_NP_BOUNDARY);
SETPARENT (PART) (NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-2< (PUNCT));
MAP (@case) TARGET (PART) - TAGS (p (VERB));

#'ang after verbs as coordinative
SETPARENT (PART) (NONE p ALLPOS) TO (-1* (VERB))(NONE p ALLPOS - TAGS);
MAP (@mark) TARGET (PART) - TAGS (p (VERB));

#-------------ADP------------------------------------------------------------

#better to apply the rule for specific cases first - the general rule is the last one.

#dang - associative: VN + dang + PUNCT @mark; N + VN + Gen @case; all other cases @cc

#dang - associative with VN
SETPARENT (Case=Com)(1 (PUNCT))(NONE p ALLPOS) TO (-1 (VerbForm=Vnoun));
MAP (@mark) TARGET (Case=Com)(1 (PUNCT))(p Head_NOUN);

SETPARENT (Case=Com)(NOT 1 (PUNCT))(NOT 2 (Case=Gen))(NONE p ALLPOS) TO (-1 Head_NOUN);
MAP (@cc) TARGET (Case=Com)(NOT 1 (PUNCT))(p Head_NOUN);


#general rule using the oblique tags

SETPARENT (ADP) (NONE p ALLPOS) TO (-1* Head_NOUN + (\^obl-adv) OR Head_NOUN + (\^obl) OR Head_NOUN + (\^obl-arg) BARRIER LEFT_NP_BOUNDARY);

#genitive + pron:
SETPARENT (Case=Gen)(NONE p ALLPOS) TO (-1 (PRON));


#genitive - for nested clauses:  include cases N (arg) + N + .... + Gen - where the parental relation is within the second N and Gen
SETPARENT (Case=Gen)(NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-1 LEFT_NP_BOUNDARY OR (\^arg1) OR (\^arg2) OR (\^obl-arg) OR (\^obl-adv));

# all other cases with Genitive
SETPARENT (Case=Gen)(NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY);

#terminative - for nested clauses: include cases N (arg1) + N +...+ Ter where the parental relation is between the second N and Ter (in these cases the second N does not have any ^obl tag)
SETPARENT (Case=Ter)(NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-1 LEFT_NP_BOUNDARY OR (\^arg1) OR (\^arg2));

# all other cases with Terminative
SETPARENT (Case=Ter) (NONE p ALLPOS) TO (-1* Head_NOUN + TAGS BARRIER LEFT_NP_BOUNDARY);
SETPARENT (Case=Ter)(NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-1 LEFT_NP_BOUNDARY);
SETPARENT (Case=Ter)(NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-2< (PUNCT));

# ADV+ADP
SETPARENT (ADP) (NONE p ALLPOS) TO (-1 (ADV));

#ADV+ADP+ADP setparetn ADP with an ADV that is preceeded by another ADP in position -1 in respect to the first ADP
SETPARENT (ADP) (NONE p ALLPOS) TO (-1 (ADP) LINK -1 (ADV));

#NOUN+ADP+ADP
SETPARENT (ADP) (NONE p ALLPOS) TO (-1 (ADP) LINK -1 (NOUN));

#ADP/SCONJ/PART/new line+ADJ+ADP
SETPARENT (ADP) (NONE p ALLPOS) TO (-1 (ADJ))(-1 (ADP) OR (SCONJ) OR (PART));
MAP (@case) TARGET (ADP)(p (ADJ));
SETPARENT (ADP) (NONE p ALLPOS) TO (-1 (ADJ))(-2< (PUNCT));
MAP (@case) TARGET (ADP)(p (ADJ));


#general rule:
SETPARENT (ADP) (NONE p ALLPOS) TO (-1* Head_NOUN + TAGS BARRIER LEFT_NP_BOUNDARY);
SETPARENT (ADP)(NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-1 LEFT_NP_BOUNDARY);
SETPARENT (ADP)(NONE p ALLPOS) TO (-1* Head_NOUN BARRIER LEFT_NP_BOUNDARY)(-2< (PUNCT));

#NOUN+VNoun+ADP (VNoun is preventing the parental relation with ADP and the HeadNoun - to be applied after the general rule.
SETPARENT (ADP)(-1 (VerbForm=Vnoun))(NONE p ALLPOS) TO (-1* TAGS);

MAP (@case) TARGET (ADP) - TAGS (p Head_NOUN OR (ADV));


#------------SCONJ---------------------------------------------------------------


#adverbs as shin-tu
SETPARENT (SCONJ)(NONE p ALLPOS) TO (-1 (ADV));
MAP (@fixed) TARGET (SCONJ) - TAGS (p (ADV));


#converbs
# it's important to add (NONE p ALLPOS) to the Head_NOUN because I want the relation to point to the real head and not to a NP constituent.
SETPARENT (SCONJ)(-1 (AUX))(NOT -2 (VERB))(NONE p ALLPOS) TO (-1* Head_NOUN)(NONE p ALLPOS);
MAP (@mark) TARGET (SCONJ) - TAGS (p (NOUN));
#(-1* (VERB))(NONE p ALLPOS - TAGS); and not (-1* (VERB)) allows to point to the main verb and not to possible verbs that acts as arguments
SETPARENT (SCONJ)(NONE p ALLPOS) TO (-1* (VERB))(NONE p ALLPOS - TAGS);
MAP (@mark) TARGET (SCONJ) - TAGS (p (VERB));
#VERB(^olb/^obl-adv/^argcl)+SCONJ
SETPARENT (SCONJ)(NONE p ALLPOS) TO (-1* (VERB) + (\^obl-adv) OR (\^obl) OR (\^argcl));
MAP (@mark) TARGET (SCONJ)(p (VERB) + (\^obl-adv) OR (\^obl) OR (\^argcl));


#------------ADV-----------------------------------------------------------------
#Insert (NONE p ALLPOS - TAGS) to link the ADV to the root verb - with no parents

SETPARENT (ADV) TO (1* (VERB))(NONE p ALLPOS - TAGS);
MAP (@advmod) TARGET (ADV) - TAGS (p (VERB));


#------------PUNCT----------------------------------------------------------------
#better to indicate an interval to the left of PUNCT? Insert (NONE p ALLPOS - TAGS) to link the PUNCT to the root verb - with no parents

SETPARENT (PUNCT) TO (-1* (VERB))(NONE p ALLPOS - TAGS);
MAP (@punct) TARGET (PUNCT) - TAGS (p (VERB));


#Head_NOUN GENITIVE MODIFIER------------------------------------------------------

SETPARENT Head_NOUN - TAGS (NONE p ALLPOS) TO (1* Head_NOUN BARRIER LEFT_NP_BOUNDARY - (Case=Gen) OR TAGS)(-1 (Case=Gen));
MAP (@nmod) TARGET Head_NOUN - TAGS (p Head_NOUN);

#Cases Head_NOUN (@nmod) + Head_NOUN + Gen
SETPARENT Head_NOUN - TAGS (NONE p ALLPOS) TO (-1 Head_NOUN + (@nmod));
MAP (@appos) TARGET Head_NOUN - TAGS (-1 Head_NOUN) (p Head_NOUN + (@nmod));



END
